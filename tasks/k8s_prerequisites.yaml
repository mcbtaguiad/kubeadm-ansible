# ============================================================================ #
# Author: Mark Taguiad <marktaguiad@tagsdev.xyz>
# ============================================================================ #
---
# ============================================================================ #
- name: Create dir paths
  become: true
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: a-rwx,a+rx
  with_items:
  - /opt/cni/bin/
# ============================================================================ #
- name: Build hosts file
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ item }}$'
    line: '{{ hostvars[item].ansible_default_ipv4.address }} {{item}}'
    state: present
  with_items: '{{ groups["all"] }}'
# ============================================================================ #
- name: Make sure EPEL repo is installed
  yum:
    name: epel-release
    state: present
# ============================================================================ #
- name: Install prerequisite packages 
  package:
    name: "{{ item }}"
    state: present
    # update_cache: yes
  with_items:
  - ca-certificates
  - curl
  - yum-utils
# ============================================================================ #
- name: Install Longhorn dependecies
  package:
    name: "{{ item }}"
    state: present
    # update_cache: yes
  with_items:
  - device-mapper-persistent-data
  - iscsi-initiator-utils
  - cryptsetup
  - nfs-utils
  - lvm2
  - jq
# ============================================================================ #
- name: Specify and load the following kernel module dependencies
  shell: |-
    echo "InitiatorName=$(/sbin/iscsi-iname)" > /etc/iscsi/initiatorname.iscsi
# ============================================================================ #
- name: Enable kernel module iscsi_tcp
  community.general.modprobe:
    name: iscsi_tcp
    state: present
# ============================================================================ #
- name: Ensure nfs-server and iscsi is started
  systemd:
    name: "{{ item }}"
    state: started
    enabled: true
  with_items:
  - nfs-server
  - iscsi
# ============================================================================ #
- name: Install CNI plugin 
  unarchive:
    src: https://github.com/containernetworking/plugins/releases/download/v1.5.1/cni-plugins-linux-amd64-v1.5.1.tgz
    dest: /opt/cni/bin/
    extra_opts: "--strip-components=1"
    owner: root
    group: root
    mode: 0755
    remote_src: true
  # args:
  #   creates: /opt/cni/bin/
# ============================================================================ #
- name: Specify and load the following kernel module dependencies
  shell: |-
    cat <<EOF | tee /etc/modules-load.d/containerd.conf
    overlay
    br_netfilter
    EOF
# ============================================================================ #
- name: Add docker(ContainerD) repository
  get_url:
    url: https://download.docker.com/linux/centos/docker-ce.repo
    dest: /etc/yum.repos.d/docker-ce.repo
# ============================================================================ #
- name: Install containerd.io and its dependecies
  package:
    name: "{{ item }}"
    state: present
  with_items:
  - containerd.io
# ============================================================================ #
# - name: Enable docker service
#   systemd:
#     name: docker
#     enabled: true
#     state: restarted
# ============================================================================ #
- name: Recreate containerd config file
  shell: containerd config default > /etc/containerd/config.toml
# ============================================================================ #
- name: Enable cgroup for containerd
  register: containerd_cfg_out
  lineinfile:
    dest: /etc/containerd/config.toml
    regexp: '\s*SystemdCgroup = false'
    line: 'SystemdCgroup = true'
# ============================================================================ #
- name: Restart containerd service
  when: containerd_cfg_out.changed
  systemd:
    name: containerd
    enabled: true
    state: restarted
# ============================================================================ #
- name: Get swap disk
  shell: |-
    fdisk -l | grep swap | awk '{ print $2 }' | sed 's/\://' 
  register: SWAP_DISK
# - name: Get UUID
#   shell: |-
#     blkid {{SWAP_FS.stdout}} | awk '{ print $2}'
#   register: SWAP_UUID
# ============================================================================ #
- name: Unmount swap
  mount:
    src: "{{SWAP_DISK.stdout}}"
    path: swap
    fstype: swap
    opts: defaults
    state: absent
# ============================================================================ #
- name: Disable swap
  ansible.builtin.shell: swapoff -a
  when: ansible_swaptotal_mb > 0
# ============================================================================ #
- name: Add Kubernetes yum repository
  become: yes
  when: ansible_os_family == "RedHat"
  yum_repository:
    name: Kubernetes
    description: Kubernetes
    baseurl: https://pkgs.k8s.io/core:/stable:/v1.30/rpm/
    enabled: yes
    gpgcheck: yes
    gpgkey: 
      - https://pkgs.k8s.io/core:/stable:/v1.30/rpm/repodata/repomd.xml.key
# ============================================================================ #
- name: Install Kubernetes binaries
  package:
    name: "{{ item }}"
    state: present
  with_items:
  - kubelet
  - kubeadm
  - kubectl
# ============================================================================ #
- name: Ensure kubelet is started
  systemd:
    name: "{{ item }}"
    state: started
    enabled: true
  with_items:
  - kubelet
# ============================================================================ #
- name: Open firewall ports
  ansible.posix.firewalld:
    permanent: yes
    immediate: yes
    port: "{{item.port}}/{{item.proto}}"
    state: "{{item.state}}"
    zone: "{{item.zone}}"
  with_items:
  - description: etcd - client communication - control-plane
    port: 2379
    proto: tcp
    state: enabled
    zone: public
  - description: etcd - peer communication - control-plane
    port: 2380
    proto: tcp
    state: enabled
    zone: public
  - description: platform Agent
    port: 8090-8091
    proto: tcp
    state: enabled
    zone: public
  - description: VxLAN backend 
    port: 8472
    proto: udp
    state: enabled
    zone: public
  - description: kube-apiserver - control-plane
    port: 6443
    proto: tcp
    state: enabled
    zone: public
  - description: kubelet - all nodes
    port: 10250-10259
    proto: tcp
    state: enabled
    zone: public
  - description: kubelet - nodeport
    port: 30000-32767
    proto: tcp
    state: enabled
    zone: public
  - description: calico BGP
    port: 179
    proto: tcp
    state: enabled
    zone: public
  - description: calico VXLAN
    port: 4789
    proto: udp
    state: enabled
    zone: public
  - description: calico Typha
    port: 5473
    proto: tcp
    state: enabled
    zone: public
  - description: calico Wireguard
    port: 51820-51821 
    proto: udp
    state: enabled
    zone: public
  - description: ingress http
    port: 80
    proto: tcp
    state: enabled
    zone: public
  - description: ingress https
    port: 443
    proto: tcp
    state: enabled
    zone: public
  - description: ingress 8443
    port: 8443
    proto: tcp
    state: enabled
    zone: public
# ============================================================================ #
# Set ip forwarding on in /proc and in the sysctl file and reload if necessary
- name: Set ipv4 ip forward
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: true
    state: present
    reload: true
# ============================================================================ #
- name: Ensure br_netfilter module is loaded into kernel
  community.general.modprobe:
    name: br_netfilter
    state: present
# ============================================================================ #
